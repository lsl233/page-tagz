---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Next.js | ShadCN | Prisma | Turso

## Project Structure and Setup

### TypeScript Usage

- Use **TypeScript** for all new files and components.

### Package Manager

- Use **pnpm** as the main package manager.

### Next.js Structure

- Follow the **Next.js 14+** app directory structure:
  - Place pages in the `/app` directory.
  - Use layout files for shared layouts.
  - Place components in the `/components` directory.

## UI Components and Styling

### UI Components

- Use the **shadcn/ui** component library for UI components, located in `/components/ui`.
  - Use the `cn` utility function for conditional class names.
  - Use theme colors from `tailwindcss 4` `global.css`  for styling.
  - Use toast from `sonner` for notifications.
  - Use the **Next.js `<Image>`** component for optimized image loading.

### Tailwind CSS

- Use **Tailwind CSS** for styling.
  - Configure Tailwind in `tailwindcss 4` `global.css`.

## Authentication and Security

### Authentication with NextAuth.js

- Use **NextAuth.js** for authentication.

  - Define authentication options in `src/server/auth.ts`.
  - Use `auth()` to get the user session on the server side.
  - Use `useSession()` to get the user session on the client side.
  - Use server-side authentication as much as possible.

  - For server components, use `auth()` to get the user session.

  ```tsx
  const session = await auth();
  ```

  - For client components, use `useSession()` to get the user session.

  ```tsx
  const session = useSession();
  ```

### Environment Variables

- Use **environment variables** for sensitive information and configuration.
  - Store them in the `.env` file (not committed to version control).
  - Access them using `process.env` in server-side code.

## Error Handling and Asynchronous Operations

### Error Handling and Loading States

- Implement error handling and loading states for asynchronous operations.

## Code Style and Naming Conventions

### Naming Conventions

- Follow these conventions:
  - Use **PascalCase** for component names.
  - Use **camelCase** for function and variable names.
  - Use **UPPERCASE_SNAKE_CASE** for constants.
