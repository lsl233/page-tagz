// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- 用户模型 (对应 users 表) ---
// model User {
//   id        String      @id @default(uuid())
//   name      String   @unique
//   email     String   @unique
//   password  String?
//   image     String?
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // 你可以在这里添加其他用户相关的字段，例如 role, createdAt 等
  // role        String? @default("user")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  bookmarks Bookmark[] // 用户拥有的书签 (原有关系)

  // *** 新增：用户创建的标签 ***
  // 定义 One-to-Many 关系到 Tag (创建的标签)
  tags Tag[] @relation("tags") // "CreatedTags" 必须与 Tag 模型中定义的 @relation 名称一致

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- 书签模型 (对应 bookmarks 表) ---
model Bookmark {
  id     String @id @default(uuid()) // 主键，自增整数
  userId String @map("user_id") // 外键，关联到 User 模型

  url         String // 网页 URL，非空
  title       String? // 网页标题，可选 (对应 TEXT NULLABLE)
  description String? // 描述，可选 (对应 TEXT NULLABLE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations:
  // 一个书签属于一个用户 (Many-to-One)
  // @relation 定义了 Many-to-One 关系，fields 指向本模型的外键字段，references 指向目标模型的主键字段
  // onDelete: Cascade 对应数据库外键的级联删除行为
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 一个书签有很多 BookmarkTag 关联记录 (One-to-Many 到中间表)
  // 这是实现 Many-to-Many 的一部分
  bookmarkTags BookmarkTag[]

  // Constraints:
  // @@unique([userId, url]) 定义一个联合唯一约束，确保同一个用户下 URL 唯一
  @@unique([userId, url])
  // @map("bookmarks") 将模型名称 'Bookmark' 映射到数据库中的表名 'bookmarks'
  @@map("bookmarks")
}

// --- 标签模型 (对应 tags 表) ---
model Tag {
  id          String  @id @default(uuid()) // 主键，自增整数
  name        String // 标签名称
  description String? // 标签描述，可选
  creatorId   String  @map("creator_id")
  creator     User    @relation("tags", fields: [creatorId], references: [id], onDelete: Cascade) // "CreatedTags" 是关系名称

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations:
  // 一个标签有很多 BookmarkTag 关联记录 (One-to-Many 到中间表)
  // 这是实现 Many-to-Many 的一部分
  bookmarkTags BookmarkTag[]

  // 添加复合唯一约束，确保同一用户不能创建重名标签
  @@unique([creatorId, name])
  // @map("tags") 将模型名称 'Tag' 映射到数据库中的表名 'tags'
  @@map("tags")
}

// --- 书签与标签的关联模型 (对应 bookmark_tags 中间表) ---
// 这个模型代表了书签和标签之间的 Many-to-Many 关联关系
model BookmarkTag {
  // 外键字段，关联到 Bookmark 和 Tag 模型
  bookmarkId String @map("bookmark_id") // 对应数据库中的 bookmark_id 列
  tagId      String @map("tag_id") // 对应数据库中的 tag_id 列

  createdAt DateTime @default(now()) @map("created_at")

  // Relations:
  // 一条关联记录属于一个书签 (Many-to-One)
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  // 一条关联记录属于一个标签 (Many-to-One)
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // Constraints:
  // @@id([bookmarkId, tagId]) 定义一个联合主键，确保同一个书签和标签的组合唯一
  @@id([bookmarkId, tagId])
  // @map("bookmark_tags") 将模型名称 'BookmarkTag' 映射到数据库中的表名 'bookmark_tags'
  @@map("bookmark_tags")
}
